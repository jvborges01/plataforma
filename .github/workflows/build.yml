name: Build Electron App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write # ESSA É A PERMISSÃO NECESSÁRIA PARA CRIAR RELEASES
  packages: write # Boa prática se você for usar o GitHub Packages
  
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # APENAS Windows e Linux
        os: [ubuntu-latest, windows-latest] 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build app (Electron Forge)
        # Assumindo que você usa o script 'make' ou 'package' do Electron Forge
        # O Electron Forge usa a plataforma do runner para saber o que buildar.
        run: npm run make 
        # NOTA: Se você realmente usa o electron-builder, mantenha seu comando original:
        # run: npx electron-builder --${{ matrix.os == 'windows-latest' && 'win' || 'linux' }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          # É uma boa prática usar um nome de artefato que reflita a plataforma.
          name: MapOn-${{ matrix.os }} 
          path: |
            # Caminho de saída padrão do Electron Forge/Builder.
            out/
            dist/ 
            release/

  release:
    # ...
    steps:
      # ...
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # Use github.ref para obter o nome da tag que disparou a ação (refs/tags/v1.0.6)
          tag_name: ${{ github.ref }} 
          # O nome visível do release
          name: Release ${{ github.ref_name }} # Usa apenas o nome (ex: v1.0.6)
          draft: false
          prerelease: false
          files: builds/** env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}